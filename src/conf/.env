# .env.development
NODE_ENV=development
VITE_APP_TITLE=Luxury Gemstone Store (Development)
VITE_API_BASE_URL=http://localhost:8000
VITE_APP_VERSION=1.0.0-dev
VITE_ENABLE_DEVTOOLS=true
VITE_ENABLE_MOCK_API=true
VITE_LOG_LEVEL=debug
VITE_ENABLE_ANALYTICS=false
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_development_key
VITE_SENTRY_DSN=
VITE_GOOGLE_ANALYTICS_ID=
VITE_HOTJAR_ID=

# Database
DATABASE_URL=postgresql://dev_user:dev_password@localhost:5432/gemstore_dev

# Redis
REDIS_URL=redis://localhost:6379

# File upload
VITE_MAX_FILE_SIZE=5242880
VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp

# PWA
VITE_PWA_ENABLED=true
VITE_PUSH_NOTIFICATIONS_ENABLED=false

---

# .env.staging
NODE_ENV=staging
VITE_APP_TITLE=Luxury Gemstone Store (Staging)
VITE_API_BASE_URL=https://api-staging.gemstore.com
VITE_APP_VERSION=1.0.0-staging
VITE_ENABLE_DEVTOOLS=false
VITE_ENABLE_MOCK_API=false
VITE_LOG_LEVEL=warn
VITE_ENABLE_ANALYTICS=true
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_staging_key
VITE_SENTRY_DSN=https://sentry-dsn-staging.ingest.sentry.io
VITE_GOOGLE_ANALYTICS_ID=GA-STAGING-ID
VITE_HOTJAR_ID=HOTJAR-STAGING-ID

# Database
DATABASE_URL=postgresql://staging_user:staging_password@db-staging.gemstore.com:5432/gemstore_staging

# Redis
REDIS_URL=redis://redis-staging.gemstore.com:6379

# File upload
VITE_MAX_FILE_SIZE=10485760
VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp

# PWA
VITE_PWA_ENABLED=true
VITE_PUSH_NOTIFICATIONS_ENABLED=true

# CDN
VITE_CDN_BASE_URL=https://cdn-staging.gemstore.com

---

# .env.production
NODE_ENV=production
VITE_APP_TITLE=Luxury Gemstone Store
VITE_API_BASE_URL=https://api.gemstore.com
VITE_APP_VERSION=1.0.0
VITE_ENABLE_DEVTOOLS=false
VITE_ENABLE_MOCK_API=false
VITE_LOG_LEVEL=error
VITE_ENABLE_ANALYTICS=true
VITE_STRIPE_PUBLISHABLE_KEY=pk_live_production_key
VITE_SENTRY_DSN=https://sentry-dsn-production.ingest.sentry.io
VITE_GOOGLE_ANALYTICS_ID=GA-PRODUCTION-ID
VITE_HOTJAR_ID=HOTJAR-PRODUCTION-ID

# Database
DATABASE_URL=postgresql://prod_user:prod_password@db-prod.gemstore.com:5432/gemstore_production

# Redis
REDIS_URL=redis://redis-prod.gemstore.com:6379

# File upload
VITE_MAX_FILE_SIZE=20971520
VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp,image/gif

# PWA
VITE_PWA_ENABLED=true
VITE_PUSH_NOTIFICATIONS_ENABLED=true

# CDN
VITE_CDN_BASE_URL=https://cdn.gemstore.com

# Security
VITE_ENABLE_CSP=true
VITE_ENABLE_HSTS=true

---

# .env.test
NODE_ENV=test
VITE_APP_TITLE=Luxury Gemstone Store (Test)
VITE_API_BASE_URL=http://localhost:8001
VITE_APP_VERSION=1.0.0-test
VITE_ENABLE_DEVTOOLS=false
VITE_ENABLE_MOCK_API=true
VITE_LOG_LEVEL=silent
VITE_ENABLE_ANALYTICS=false
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_test_key
VITE_SENTRY_DSN=
VITE_GOOGLE_ANALYTICS_ID=
VITE_HOTJAR_ID=

# Database
DATABASE_URL=postgresql://test_user:test_password@localhost:5433/gemstore_test

# Redis
REDIS_URL=redis://localhost:6380

# File upload
VITE_MAX_FILE_SIZE=1048576
VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png

# PWA
VITE_PWA_ENABLED=false
VITE_PUSH_NOTIFICATIONS_ENABLED=false

---

# Environment Configuration Helper
# utils/env.ts

export interface EnvConfig {
  NODE_ENV: string
  APP_TITLE: string
  API_BASE_URL: string
  APP_VERSION: string
  ENABLE_DEVTOOLS: boolean
  ENABLE_MOCK_API: boolean
  LOG_LEVEL: 'debug' | 'info' | 'warn' | 'error' | 'silent'
  ENABLE_ANALYTICS: boolean
  STRIPE_PUBLISHABLE_KEY: string
  SENTRY_DSN: string
  GOOGLE_ANALYTICS_ID: string
  HOTJAR_ID: string
  MAX_FILE_SIZE: number
  ALLOWED_FILE_TYPES: string[]
  PWA_ENABLED: boolean
  PUSH_NOTIFICATIONS_ENABLED: boolean
  CDN_BASE_URL?: string
  ENABLE_CSP?: boolean
  ENABLE_HSTS?: boolean
}

class EnvironmentConfig {
  private config: EnvConfig

  constructor() {
    this.config = {
      NODE_ENV: import.meta.env.NODE_ENV || 'development',
      APP_TITLE: import.meta.env.VITE_APP_TITLE || 'Luxury Gemstone Store',
      API_BASE_URL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000',
      APP_VERSION: import.meta.env.VITE_APP_VERSION || '1.0.0',
      ENABLE_DEVTOOLS: this.parseBoolean(import.meta.env.VITE_ENABLE_DEVTOOLS, false),
      ENABLE_MOCK_API: this.parseBoolean(import.meta.env.VITE_ENABLE_MOCK_API, false),
      LOG_LEVEL: import.meta.env.VITE_LOG_LEVEL || 'info',
      ENABLE_ANALYTICS: this.parseBoolean(import.meta.env.VITE_ENABLE_ANALYTICS, false),
      STRIPE_PUBLISHABLE_KEY: import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '',
      SENTRY_DSN: import.meta.env.VITE_SENTRY_DSN || '',
      GOOGLE_ANALYTICS_ID: import.meta.env.VITE_GOOGLE_ANALYTICS_ID || '',
      HOTJAR_ID: import.meta.env.VITE_HOTJAR_ID || '',
      MAX_FILE_SIZE: parseInt(import.meta.env.VITE_MAX_FILE_SIZE || '5242880'),
      ALLOWED_FILE_TYPES: (import.meta.env.VITE_ALLOWED_FILE_TYPES || 'image/jpeg,image/png').split(','),
      PWA_ENABLED: this.parseBoolean(import.meta.env.VITE_PWA_ENABLED, true),
      PUSH_NOTIFICATIONS_ENABLED: this.parseBoolean(import.meta.env.VITE_PUSH_NOTIFICATIONS_ENABLED, false),
      CDN_BASE_URL: import.meta.env.VITE_CDN_BASE_URL,
      ENABLE_CSP: this.parseBoolean(import.meta.env.VITE_ENABLE_CSP, false),
      ENABLE_HSTS: this.parseBoolean(import.meta.env.VITE_ENABLE_HSTS, false)
    }

    this.validateConfig()
  }

  private parseBoolean(value: string | undefined, defaultValue: boolean): boolean {
    if (value === undefined) return defaultValue
    return value.toLowerCase() === 'true' || value === '1'
  }

  private validateConfig(): void {
    const requiredFields: (keyof EnvConfig)[] = ['API_BASE_URL', 'APP_TITLE']
    
    for (const field of requiredFields) {
      if (!this.config[field]) {
        throw new Error(`Missing required environment variable: ${field}`)
      }
    }

    if (this.config.ENABLE_ANALYTICS && !this.config.GOOGLE_ANALYTICS_ID) {
      console.warn('Analytics enabled but GOOGLE_ANALYTICS_ID not provided')
    }

    if (this.config.NODE_ENV === 'production') {
      if (!this.config.SENTRY_DSN) {
        console.warn('Production environment but Sentry DSN not configured')
      }
      
      if (this.config.STRIPE_PUBLISHABLE_KEY.includes('test')) {
        console.error('Test Stripe key detected in production environment!')
      }
    }
  }

  get<K extends keyof EnvConfig>(key: K): EnvConfig[K] {
    return this.config[key]
  }

  getAll(): EnvConfig {
    return { ...this.config }
  }

  isDevelopment(): boolean {
    return this.config.NODE_ENV === 'development'
  }

  isProduction(): boolean {
    return this.config.NODE_ENV === 'production'
  }

  isStaging(): boolean {
    return this.config.NODE_ENV === 'staging'
  }

  isTest(): boolean {
    return this.config.NODE_ENV === 'test'
  }

  // Feature flags based on environment
  shouldEnableDevtools(): boolean {
    return this.config.ENABLE_DEVTOOLS && !this.isProduction()
  }

  shouldUseMockApi(): boolean {
    return this.config.ENABLE_MOCK_API || this.isTest()
  }

  shouldEnableAnalytics(): boolean {
    return this.config.ENABLE_ANALYTICS && (this.isProduction() || this.isStaging())
  }

  getApiUrl(endpoint: string): string {
    const baseUrl = this.config.API_BASE_URL.replace(/\/+$/, '')
    const cleanEndpoint = endpoint.replace(/^\/+/, '')
    return `${baseUrl}/${cleanEndpoint}`
  }

  getCdnUrl(asset: string): string {
    if (!this.config.CDN_BASE_URL) {
      return asset
    }
    const baseUrl = this.config.CDN_BASE_URL.replace(/\/+$/, '')
    const cleanAsset = asset.replace(/^\/+/, '')
    return `${baseUrl}/${cleanAsset}`
  }
}

export const env = new EnvironmentConfig()
export default env