groq api: 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
huggingFace: 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
deepseek: sk-72c1245465cb4ff6842cecd941ac5264
chatgpt: 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
Gemeni: AIzaSyCBMIoPw-9T-pnlkAMxJggS8tLRu4A777I
user: salindavjk
pass: Nirmala**@143
proton vpn user: salindahacker@gmail.com
proton vpn pass: _Evdp,k6k.c*9HY


Technology Stack:
- Vue.js 3 with Composition API
- Vite build tool
- Tailwind CSS for styling
- Pinia for state management
- Vue Router 4
- TypeScript

Design System:
- Color Palette: Primary: emerald-600, Secondary: slate-800, Accent: amber-500
- Typography: Inter font family
- Spacing: Tailwind's default spacing scale
- Border Radius: rounded-lg (8px) for cards, rounded-md (6px) for buttons
- Shadows: shadow-lg for cards, shadow-md for hover states

Component Naming Convention:
- PascalCase for components (ProductCard.vue)
- Prefix with base type: Base*, Layout*, Product*, User*
- Composables: use* prefix (useAuth, useCart)

Responsive Breakpoints:
- Mobile: default (0px+)
- Tablet: md (768px+)
- Desktop: lg (1024px+)
- Large Desktop: xl (1280px+)

Create a comprehensive product catalog system for the luxury gemstone e-commerce platform with advanced filtering and search capabilities:

CONTEXT (Consistent Architecture):
- Vue 3 Composition API with <script setup>
- Tailwind CSS design system (emerald-600 primary, slate-800 secondary, amber-500 accent)
- Pinia for state management, mobile-first responsive
- Inter font, rounded-lg cards, shadow-lg effects

GENERATE COMPLETE CODE FOR:

1. **Product Components:**
   - ProductGrid.vue (responsive grid layout with view toggle)
   - ProductCard.vue (product card with hover effects, quick actions)
   - ProductList.vue (list view alternative)
   - ProductFilters.vue (advanced filtering sidebar)
   - ProductSearch.vue (search bar with autocomplete)
   - ProductSort.vue (sorting dropdown)

2. **Product Store:**
   - stores/products.ts (product catalog state management)
   - Filtering, sorting, and search logic
   - Pagination handling
   - Categories and collections

3. **Composables:**
   - composables/useProducts.ts (product data management)
   - composables/useFilters.ts (filtering logic)
   - composables/useSearch.ts (search functionality)

4. **Filter Components:**
   - FilterPrice.vue (price range slider)
   - FilterCategory.vue (category checkboxes)
   - FilterGemstoneType.vue (gemstone-specific filters)
   - FilterColor.vue (color picker)
   - FilterClarity.vue (clarity ratings)
   - FilterCarat.vue (carat weight range)

5. **Views:**
   - ProductsView.vue (main catalog page)
   - CategoryView.vue (category-specific listings)

GEMSTONE-SPECIFIC FEATURES:
- Gemstone type filters (Diamond, Ruby, Sapphire, Emerald, etc.)
- 4Cs filtering (Cut, Color, Clarity, Carat)
- Shape/cut selection with visual icons
- Price per carat calculations
- Certification filters (GIA, AGS, etc.)
- Origin/source location filters

DESIGN REQUIREMENTS:
- Modern grid layout with aspect ratio preservation
- High-quality image placeholders with lazy loading
- Smooth hover animations and transitions
- Mobile-optimized filter drawer
- Infinite scroll or pagination options
- Loading skeletons for better UX
- Empty states with compelling CTAs

ADVANCED FEATURES:
- Multi-select filters with clear indicators
- Filter breadcrumbs
- Save search functionality
- Recently viewed products
- Quick view modals
- Comparison checkbox preparation
- Stock status indicators
- Wishlist quick-add buttons

RESPONSIVE DESIGN:
- 1 column (mobile), 2 columns (tablet), 3-4 columns (desktop)
- Collapsible filter sidebar on mobile
- Touch-friendly controls
- Optimized image sizes for different viewports

Generate complete, production-ready components with proper TypeScript types, proper mock data structure,proper state management, proper form handling,comprehensive comments,modern CSS practices,modern UI patterns and responsive design.

IMPORTANT REQUIREMENTS:
- Generate COMPLETE, production-ready code (no placeholders or TODOs)
- All components must be fully responsive and mobile-optimized
- Include comprehensive error handling and loading states
- Add detailed comments explaining complex logic
- Ensure all code follows Vue 3 Composition API best practices
- Make components reusable and properly typed
- Include accessibility features (ARIA labels, keyboard navigation)
- Generate mock data where needed for realistic demonstrations

DELIVERABLES:
Please provide complete file contents for each requested component, including:
- Full component code with <template>, <script setup>, and <style scoped>
- All necessary imports and dependencies
- Proper TypeScript types (if applicable)
- Responsive design classes
- Error handling and loading states
- Accessibility attributes


current prompt (clear this before upload):
attached document contains the previous prompt of code generation request. code generation process interrupted due to conversation limit.
previously completed files:
*types/product.ts*
*stores/products.ts*
*composables/useProducts.ts*
*composables/useFilters.ts*
*composables/useSearch.ts*
*components/ProductCard.vue*
*components/ProductGrid.vue*
*components/ProductFilters.vue*
*components/FilterPrice.vue*
*components/FilterCategory.vue*
*components/FilterGemstoneType.vue*
*components/FilterColor.vue*
*components/FilterClarity.vue*
*components/FilterCarat.vue*
*components/ProductList.vue*
*components/ProductSearch.vue*
*components/ProductSort.vue*
*views/product/ProductView.vue*
*views/product/CategoryView.vue*
*components/ViewToggle.vue*
*components/ActiveFilter.vue*
*components/FilterTag.vue*
